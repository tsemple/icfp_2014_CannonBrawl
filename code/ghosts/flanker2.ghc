;-----------------------------------------------------------------------------
; setup
;-----------------------------------------------------------------------------
mov h,255				; setup stack

jeq INIT_COMPLETE:,$INITIALIZED,1

INIT_RESET:
mov $DIST_COUNTER,50
mov $INITIALIZED,1
mov pc,INIT_END:

INIT_COMPLETE:

jeq INIT_RESET:,$DIST_COUNTER,0

dec $DIST_COUNTER

INIT_END:

mov $DIST_OFFSET,$DIST_COUNTER   ; DIST_OFFSET shrinks over time and pops back
div $DIST_OFFSET,10

;-----------------------------------------------------------------------------
; load state
;-----------------------------------------------------------------------------
int 1					; (a,b) = lambdaman.xy
mov $LM_X,a 
mov $LM_Y,b

int 3
int 6
mov $VITALITY,a
mov $DIRECTION,b

int 3					; Get our ghost index in A.
int 5					; (a,b) = ghost.xy
mov $GHOST_X,a
mov $GHOST_Y,b

;-----------------------------------------------------------------------------
; 
;-----------------------------------------------------------------------------

jeq IN_FRIGHT_MODE:,$VITALITY,1

;-----------------------------------------------------------------------------
; normal mode
;-----------------------------------------------------------------------------

int 3
and a,3 ; a = ghost_index % 4
mov $DIR_INDEX,a

mov $GOTO_X,$LM_X
mov $GOTO_Y,$LM_Y

jgt NM_NOT_GHOST_0:,$DIR_INDEX,0
		sub $GOTO_X,$DIST_OFFSET
		mov pc,FUNC_GOTO_POINT:

NM_NOT_GHOST_0:
jgt NM_NOT_GHOST_1:,$DIR_INDEX,1
		add $GOTO_X,$DIST_OFFSET
		mov pc,FUNC_GOTO_POINT:

NM_NOT_GHOST_1:
jgt NM_NOT_GHOST_2:,$DIR_INDEX,2
		sub $GOTO_Y,$DIST_OFFSET
		mov pc,FUNC_GOTO_POINT:

NM_NOT_GHOST_2:
		add $GOTO_Y,$DIST_OFFSET
		mov pc,FUNC_GOTO_POINT:

;-----------------------------------------------------------------------------
; run away in fright mode
;-----------------------------------------------------------------------------
IN_FRIGHT_MODE:

mov $DELTA_X,$LM_X
sub $DELTA_X,$GHOST_X

mov $DELTA_Y,$LM_Y
sub $DELTA_Y,$GHOST_Y

mov a,$DELTA_X
call FUNC_ABS:
mov $ABSDIFF_X,a

mov a,$DELTA_Y
call FUNC_ABS:
mov $ABSDIFF_Y,a

jlt FR_JUMP25:,$ABSDIFF_Y,$ABSDIFF_X     ; jump if y-diff < x-diff

	jgt FR_JUMP22:,$DELTA_X,128   ; jump if lambda-man towards left

		mov $DIR1,3         ; go left
		mov pc,FR_TRY_DIR1:

	FR_JUMP22:

		mov $DIR1,1         ; go right
		mov pc,FR_TRY_DIR1:

FR_JUMP25:

	jgt FR_JUMP29:,$DELTA_Y,128   ; jump if lambda-man towards up

		mov $DIR1,0         ; go up
		mov pc,FR_TRY_DIR1:

	FR_JUMP29:

		mov $DIR1,2         ; go down

FR_TRY_DIR1:
mov a,$DIR1
call FUNC_CANGO:
jeq FR_NEED_DIR2:,a,0

	mov a,$DIR1			; go in direction 1
	int 0
	hlt

FR_NEED_DIR2:

jlt FR_DIR2_JUMP1:,$ABSDIFF_Y,$ABSDIFF_X     ; jump if y-diff > x-diff

	jgt FR_DIR2_JUMP3:,$DELTA_Y,128   ; jump if lambda-man towards up

		mov $DIR2,0         ; go up
		mov pc,FR_TRY_DIR2:

	FR_DIR2_JUMP3:

		mov $DIR2,2         ; go down
		mov pc,FR_TRY_DIR2:

FR_DIR2_JUMP1:

	jgt FR_DIR2_JUMP2:,$DELTA_X,128   ; jump if lambda-man towards right

		mov $DIR2,3         ; go left
		mov pc,FR_TRY_DIR2:

	FR_DIR2_JUMP2:

		mov $DIR2,1         ; go right

FR_TRY_DIR2:
mov a,$DIR2			; go in direction 2
int 0
hlt

;-----------------------------------------------------------------------------
; a = abs(a)
;-----------------------------------------------------------------------------
FUNC_ABS:
mov b,a
jlt ABS_END:,a,128
mov a,0
sub a,b
ABS_END:
ret

;-----------------------------------------------------------------------------
; bool can_go_in_direction(direction reg_a)
;-----------------------------------------------------------------------------
FUNC_CANGO:
mov c,a
mov b,$DIRECTION
xor b,2					; b = opposite direction
jeq CANGO_FALSE:,b,c	; can't go backwards

mov a,$GHOST_X
mov b,$GHOST_Y
jgt CANGO_NOTUP:,c,0
dec b
mov pc,CANGO_CHECKWALL:
CANGO_NOTUP:
jgt CANGO_NOTRIGHT:,c,1
inc a
mov pc,CANGO_CHECKWALL:
CANGO_NOTRIGHT:
jgt CANGO_NOTDOWN:,c,2
inc b
mov pc,CANGO_CHECKWALL:
CANGO_NOTDOWN:
dec a
CANGO_CHECKWALL:
int 7					; a = map square in direction

jeq CANGO_FALSE:,a,0	; check for wall

mov a,1					; return true
ret

CANGO_FALSE:
mov a,0					; return false
ret

;-----------------------------------------------------------------------------
; goto point ($GOTO_X, $GOTO_Y)
;-----------------------------------------------------------------------------
FUNC_GOTO_POINT:

mov $DELTA_X,$GOTO_X
sub $DELTA_X,$GHOST_X

mov $DELTA_Y,$GOTO_Y
sub $DELTA_Y,$GHOST_Y

mov a,$DELTA_X
call FUNC_ABS:
mov $ABSDIFF_X,a

mov a,$DELTA_Y
call FUNC_ABS:
mov $ABSDIFF_Y,a

jgt GP_JUMP25:,$ABSDIFF_Y,$ABSDIFF_X     ; jump if y-diff > x-diff

	jlt GP_JUMP22:,$DELTA_X,128   ; jump if dest towards right

		mov $DIR1,3         ; go left
		mov pc,GP_TRY_DIR1:

	GP_JUMP22:

		mov $DIR1,1         ; go right
		mov pc,GP_TRY_DIR1:

GP_JUMP25:

	jlt GP_JUMP29:,$DELTA_Y,128   ; jump if dest towards down

		mov $DIR1,0         ; go up
		mov pc,GP_TRY_DIR1:

	GP_JUMP29:

		mov $DIR1,2         ; go down

GP_TRY_DIR1:
mov a,$DIR1
call FUNC_CANGO:
jeq GP_NEED_DIR2:,a,0

	mov a,$DIR1			; go in direction 1
	int 0
	hlt

GP_NEED_DIR2:

jgt GP_DIR2_JUMP1:,$ABSDIFF_Y,$ABSDIFF_X     ; jump if y-diff > x-diff

	jlt GP_DIR2_JUMP3:,$DELTA_Y,128   ; jump if dest towards up

		mov $DIR2,0         ; go up
		mov pc,GP_TRY_DIR2:

	GP_DIR2_JUMP3:

		mov $DIR2,2         ; go down
		mov pc,GP_TRY_DIR2:

GP_DIR2_JUMP1:

	jlt GP_DIR2_JUMP2:,$DELTA_X,128   ; jump if dest towards right

		mov $DIR2,3         ; go left
		mov pc,GP_TRY_DIR2:

	GP_DIR2_JUMP2:

		mov $DIR2,1         ; go right

GP_TRY_DIR2:
mov a,$DIR2			; go in direction 2
int 0
hlt
